{"version":3,"sources":["App.js","index.js"],"names":["App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","sendGif","length","onInputChange","event","value","target","TEST_GIFS","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","gif","src","alt","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAoJeA,EA7IH,WAKV,MAA0CC,mBAAS,MAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACMC,EAAwB,uCAAG,gCAAAC,EAAA,oEAEVC,SAAXC,EAFqB,EAErBA,QAFqB,qBAKvBA,EAAOC,UALgB,wBAMzBC,QAAQC,IAAI,yBANa,SAOFH,EAAOI,QAAQ,CAAEC,eAAe,IAP9B,OAOnBC,EAPmB,OAQzBJ,QAAQC,IACN,4BACAG,EAASC,UAAUC,YAErBhB,EAAiBc,EAASC,UAAUC,YAZX,gCAe3BC,MAAM,8DAfqB,0DAkB7BP,QAAQQ,MAAR,MAlB6B,0DAAH,qDAsBxBC,EAAa,uCAAG,gCAAAb,EAAA,2DACDC,SAAXC,EADY,EACZA,QADY,gCAIKA,EAAOI,UAJZ,OAIZE,EAJY,OAKlBJ,QAAQC,IAAI,6BAA8BG,EAASC,UAAUC,YAC7DhB,EAAiBc,EAASC,UAAUC,YANlB,2CAAH,qDAUbI,EAAO,uCAAG,sBAAAd,EAAA,sDACVL,EAAWoB,OAAS,GACtBX,QAAQC,IAAI,YAAaV,GACzBG,EAAW,GAAD,mBAAKD,GAAL,CAAcF,KACxBC,EAAc,KAEdQ,QAAQC,IAAI,2BANA,2CAAH,qDAUPW,EAAgB,SAACC,GACrB,IAAQC,EAAUD,EAAME,OAAhBD,MACRtB,EAAcsB,IAGVE,EAAY,CAChB,0DACA,sIACA,sIACA,2DA+DF,OAnBAC,qBAAU,WACR,IAAMC,EAAM,uCAAG,sBAAAtB,EAAA,sEACPD,IADO,2CAAH,qDAIZ,OADAE,OAAOsB,iBAAiB,OAAQD,GACzB,kBAAMrB,OAAOuB,oBAAoB,OAAQF,MAC/C,IAEHD,qBAAU,WACJ5B,IACFW,QAAQC,IAAI,wBAKZP,EAAWsB,MAEZ,CAAC3B,IAGF,qBAAKgC,UAAU,MAAf,SAEE,qBAAKA,UAAWhC,EAAgB,mBAAqB,YAArD,SACE,qBAAKgC,UAAU,YAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,mBAAGA,UAAU,SAAb,qCACA,mBAAGA,UAAU,WAAb,+DAGEhC,GArEV,wBACEgC,UAAU,mCACVC,QAASb,EAFX,+BAsESpB,GA7DT,sBAAKgC,UAAU,sBAAf,UACE,uBACEE,SAAU,SAACV,GACTA,EAAMW,iBACNd,KAHJ,UAME,uBACEe,KAAK,OACLC,YAAY,kBACZZ,MAAOvB,EACPoC,SAAUf,IAEZ,wBAAQa,KAAK,SAASJ,UAAU,+BAAhC,uBAIF,qBAAKA,UAAU,WAAf,SACG5B,EAAQmC,KAAI,SAACC,GAAD,OACX,qBAAKR,UAAU,WAAf,SACE,qBAAKS,IAAKD,EAAKE,IAAKF,KADSA,qBC7FzCG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.03082d77.chunk.js","sourcesContent":["/*\r\n * We are going to be using the useEffect hook!\r\n  Code based on buildspace\r\n */\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  /*\r\n   * This function holds the logic for deciding if a Phantom Wallet is\r\n   * connected or not\r\n   */\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n  const checkIfWalletIsConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom wallet found!\");\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Connected with Public Key\",\r\n            response.publicKey.toString()\r\n          );\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      } else {\r\n        alert(\"Solana object not found! Get a Phantom Wallet ðŸ‘»\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length > 0) {\r\n      console.log('Gif link:', inputValue);\r\n      setGifList([...gifList, inputValue]);\r\n      setInputValue('');\r\n    } else {\r\n      console.log('Empty input. Try again.');\r\n    }\r\n  };\r\n\r\n  const onInputChange = (event) => {\r\n    const { value } = event.target;\r\n    setInputValue(value);\r\n  };\r\n\r\n  const TEST_GIFS = [\r\n    \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\r\n    \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\r\n    \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\r\n    \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\r\n  ];\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const renderConnectedContainer = () => (\r\n    <div className=\"connected-container\">\r\n      <form\r\n        onSubmit={(event) => {\r\n          event.preventDefault();\r\n          sendGif();\r\n        }}\r\n      >\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter gif link!\"\r\n          value={inputValue}\r\n          onChange={onInputChange}\r\n        ></input>\r\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n      <div className=\"gif-grid\">\r\n        {gifList.map((gif) => (\r\n          <div className=\"gif-item\" key={gif}>\r\n            <img src={gif} alt={gif} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  /*\r\n   * When our component first mounts, let's check to see if we have a connected\r\n   * Phantom Wallet\r\n   */\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await checkIfWalletIsConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log('Fetching GIF list...');\r\n      \r\n      // Call Solana program here.\r\n  \r\n      // Set state\r\n      setGifList(TEST_GIFS);\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* This was solely added for some styling fanciness */}\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className=\"container\">\r\n          <div className=\"header-container\">\r\n            <p className=\"header\">ðŸ–¼ GIF Portal</p>\r\n            <p className=\"sub-text\">\r\n              View your GIF collection in the metaverse âœ¨\r\n            </p>\r\n            {!walletAddress && renderNotConnectedContainer()}\r\n            {walletAddress && renderConnectedContainer()}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}